!DOCTYPE html
html[lang="en" data-theme="dark"]
  head
    meta[charset="UTF-8"]
    meta[name="viewport" content="width=device-width, initial-scale=1.0"]
    title: Complex TinyHTML Test File
    style[type="text/css"]: |
      /* CSS with special characters & symbols */
      body { 
        font-family: "Comic Sans MS", 'Arial Black', sans-serif;
        background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
        margin: 0;
        padding: 20px;
      }
      
      .special-chars::before {
        content: "‚òÖ ‚ô† ‚ô• ‚ô¶ ‚ô£ ‚Üí ‚Üê ‚Üë ‚Üì ‚ö° ‚ö† ‚úì ‚úó & < > ' \" \\";
      }
      
      @media (max-width: 768px) {
        .responsive { display: none !important; }
      }
      
      /* Unicode and emoji in CSS */
      .emoji::after { content: "üöÄ üéâ üíª üî• ‚≠ê üåü"; }
  
  body.main-body#app[data-version="1.2.3" custom-attr data-test="value with spaces"]
    
    // This is a comment line that should be treated as text
    header.site-header#main-header[role="banner" aria-label="Main navigation"]
      nav.navbar.navbar-expand-lg[data-bs-toggle="collapse"]
        div.container-fluid
          a.navbar-brand[href="#" title="Home Page"]: Logo & Brand‚Ñ¢
          
          button.navbar-toggler[type="button" data-bs-target="#navbarNav" aria-expanded="false"]
            span.navbar-toggler-icon
          
          div.collapse.navbar-collapse#navbarNav
            ul.navbar-nav.ms-auto
              li.nav-item
                a.nav-link.active[href="#home" aria-current="page"]: Home
              li.nav-item.dropdown
                a.nav-link.dropdown-toggle[href="#" data-bs-toggle="dropdown"]: Products & Services
                ul.dropdown-menu
                  li
                    a.dropdown-item[href="/product1"]: Product #1 (New!)
                  li
                    a.dropdown-item[href="/product2"]: Product "Special Edition"
                  li
                    hr.dropdown-divider
                  li
                    a.dropdown-item[href="/contact"]: Contact Us
    
    main.main-content#content[role="main"]
      
      // Section with complex text content
      section.hero-section.bg-primary[data-aos="fade-up"]
        div.container
          div.row.align-items-center
            div.col-lg-6
              h1.display-4.fw-bold: |
                Welcome to Our Amazing Platform!
                Experience the <future> of web development
                With symbols: & < > " ' \ / | * ? : ; , . ! @ # $ % ^ & * ( ) - _ + = { } [ ]
              
              p.lead.text-muted: |
                This is a multi-line paragraph that contains various
                special characters and symbols that might break parsers:
                
                Mathematical symbols: ¬± √ó √∑ ‚àû ‚àö ‚àë ‚àè ‚à´ ‚àÜ
                Currency: $ ‚Ç¨ ¬£ ¬• ‚Çπ ‚ÇΩ ‚Çø
                Punctuation: ""''‚Äû‚Äö¬´¬ª‚Äπ‚Ä∫‚Ä¶‚Äì‚Äî
                Arrows: ‚Üê ‚Üí ‚Üë ‚Üì ‚Üî ‚Üï ‚áê ‚áí ‚áî
                
                And even some code snippets:
                if (x < 5 && y > 10) { return "success"; }
              
              div.btn-group[role="group"]
                button.btn.btn-primary.btn-lg[type="button" onclick="alert('Hello & Welcome!');"]: Get Started
                button.btn.btn-outline-secondary.btn-lg[type="button"]: Learn More
        
        // Nested complex structure with mixed content
        div.features-grid
          div.row.g-4
            div.col-md-4
              div.feature-card.h-100[data-feature="security"]
                div.card-body
                  i.fas.fa-shield-alt.fa-3x.text-primary.mb-3
                  h3.card-title: üîí Security & Privacy
                  p.card-text: |
                    Your data is encrypted with AES-256 encryption.
                    We follow GDPR, CCPA & SOC 2 compliance standards.
                    Special chars in content: <script>alert("XSS test")</script>
            
            div.col-md-4
              div.feature-card.h-100[data-feature="performance"]
                div.card-body
                  i.fas.fa-rocket.fa-3x.text-success.mb-3
                  h3.card-title: ‚ö° Performance & Speed
                  p.card-text
                    | Lightning fast with 99.9% uptime guarantee.
                    | Optimized for mobile & desktop experiences.
                    | Load times under 200ms worldwide.
            
            div.col-md-4
              div.feature-card.h-100[data-feature="support"]
                div.card-body
                  i.fas.fa-headset.fa-3x.text-info.mb-3
                  h3.card-title: üéß 24/7 Support
                  p.card-text: Our team is here to help you succeed!
      
      // Form section with complex inputs
      section.contact-section.py-5#contact[data-bg="gradient"]
        div.container
          div.row.justify-content-center
            div.col-lg-8
              h2.text-center.mb-5: üìß Contact Form with Edge Cases
              
              form.contact-form[action="/submit" method="POST" enctype="multipart/form-data" novalidate]
                div.row.g-3
                  div.col-md-6
                    label.form-label[for="firstName"]: First Name *
                    input.form-control[type="text" id="firstName" name="firstName" required placeholder="Enter your first name" pattern="[A-Za-z]+" title="Only letters allowed"]
                  
                  div.col-md-6
                    label.form-label[for="lastName"]: Last Name *
                    input.form-control[type="text" id="lastName" name="lastName" required placeholder="Enter your last name"]
                  
                  div.col-12
                    label.form-label[for="email"]: Email Address *
                    input.form-control[type="email" id="email" name="email" required placeholder="user@example.com" autocomplete="email"]
                  
                  div.col-12
                    label.form-label[for="subject"]: Subject
                    select.form-select[id="subject" name="subject" required]
                      option[value="" disabled selected]: Choose a subject...
                      option[value="general"]: General Inquiry
                      option[value="support"]: Technical Support
                      option[value="billing"]: Billing & Payments
                      option[value="bug"]: Bug Report (Critical!)
                      option[value="feature"]: Feature Request
                  
                  div.col-12
                    label.form-label[for="message"]: Message *
                    textarea.form-control[id="message" name="message" rows="5" required placeholder="Enter your message here..."]: |
                      Default message with special characters:
                      "Hello & welcome to our platform!"
                      We support UTF-8: ‰Ω†Â•Ω, –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ŸÖÿ±ÿ≠ÿ®ÿß, Hello! üåç
                      
                      Test symbols: @#$%^&*()_+-={}[]|;':",./<>?
                  
                  div.col-12
                    div.form-check
                      input.form-check-input[type="checkbox" id="newsletter" name="newsletter" value="yes" checked]
                      label.form-check-label[for="newsletter"]: Subscribe to our newsletter & updates
                    
                    div.form-check
                      input.form-check-input[type="checkbox" id="terms" name="terms" required]
                      label.form-check-label[for="terms"]: I agree to the Terms & Conditions *
                  
                  div.col-12.text-center
                    button.btn.btn-success.btn-lg[type="submit" disabled]: üì§ Send Message
                    button.btn.btn-secondary.btn-lg.ms-2[type="reset"]: üîÑ Reset Form
      
      // JavaScript testing section
      section.code-section.py-5.bg-light
        div.container
          h2.text-center.mb-4: üíª Code Examples & Edge Cases
          
          div.row.g-4
            div.col-lg-6
              h4: HTML Code Sample
              pre.code-block.bg-dark.text-light.p-3.rounded
                code.language-html: |
                  &lt;!DOCTYPE html&gt;
                  &lt;html lang="en"&gt;
                    &lt;head&gt;
                      &lt;title&gt;Sample &amp; Test&lt;/title&gt;
                    &lt;/head&gt;
                    &lt;body&gt;
                      &lt;p&gt;Hello "World" &amp; 'Universe'!&lt;/p&gt;
                    &lt;/body&gt;
                  &lt;/html&gt;
            
            div.col-lg-6
              h4: CSS Code Sample
              pre.code-block.bg-dark.text-light.p-3.rounded
                code.language-css: |
                  /* Special characters in CSS */
                  .test::before {
                    content: "‚òÖ & < > ' \" \\ / | ? * + ( ) [ ] { }";
                  }
                  
                  @media (max-width: 768px) {
                    .responsive { display: none !important; }
                  }
      
      // Table with complex data
      section.data-section.py-5
        div.container
          h2.text-center.mb-4: üìä Data Table with Special Characters
          
          div.table-responsive
            table.table.table-striped.table-hover[data-sortable="true"]
              thead.table-dark
                tr
                  th[scope="col" data-sort="string"]: ID #
                  th[scope="col" data-sort="string"]: Name & Title
                  th[scope="col" data-sort="number"]: Price ($)
                  th[scope="col" data-sort="string"]: Status
                  th[scope="col"]: Actions
              tbody
                tr[data-id="001"]
                  td: #001
                  td: Product "Alpha" & Beta‚Ñ¢
                  td: $1,234.56
                  td
                    span.badge.bg-success: ‚úì Active
                  td
                    button.btn.btn-sm.btn-primary[onclick='editItem("001")']: Edit
                    button.btn.btn-sm.btn-danger.ms-1[onclick='deleteItem("001")']: Delete
                
                tr[data-id="002"]
                  td: #002
                  td: Service <Premium> Edition
                  td: $2,999.99
                  td
                    span.badge.bg-warning: ‚ö† Pending
                  td
                    button.btn.btn-sm.btn-primary[onclick='editItem("002")']: Edit
                    button.btn.btn-sm.btn-danger.ms-1[onclick='deleteItem("002")']: Delete
                
                tr[data-id="003"]
                  td: #003
                  td: Package 'Ultimate' & More
                  td: $5,000.00
                  td
                    span.badge.bg-danger: ‚úó Inactive
                  td
                    button.btn.btn-sm.btn-primary[onclick='editItem("003")']: Edit
                    button.btn.btn-sm.btn-danger.ms-1[onclick='deleteItem("003")']: Delete
    
    // Complex script section with edge cases
    script[type="text/javascript"]: |
      // JavaScript with special characters and edge cases
      console.log("Script loaded successfully! üöÄ");
      
      // Variables with special chars
      const specialChars = "!@#$%^&*()_+-={}[]|;':\",./<>?";
      const unicodeText = "Unicode test: ‰Ω†Â•Ω‰∏ñÁïå üåç –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –º–∏—Ä üá∑üá∫ ŸÖÿ±ÿ≠ÿ®ÿß ÿ®ÿßŸÑÿπÿßŸÑŸÖ üåè";
      const htmlEntities = "&lt;div&gt;Test &amp; 'quotes' &quot;double&quot;&lt;/div&gt;";
      
      // Functions with complex logic
      function processData(input) {
        if (input && input.length > 0) {
          return input.replace(/[<>&"']/g, function(match) {
            switch(match) {
              case '<': return '&lt;';
              case '>': return '&gt;';
              case '&': return '&amp;';
              case '"': return '&quot;';
              case "'": return '&#39;';
              default: return match;
            }
          });
        }
        return "";
      }
      
      // Event handlers
      document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded with special chars: & < > " \' \\');
        
        // Form validation
        const form = document.querySelector('.contact-form');
        if (form) {
          form.addEventListener('submit', function(e) {
            e.preventDefault();
            alert('Form submitted with data containing: & < > " \' symbols!');
          });
        }
        
        // Dynamic content
        const dynamicHTML = `
          <div class="dynamic">
            <p>Generated content with "quotes" & 'apostrophes'</p>
            <span>Math: 2 < 5 && 10 > 3</span>
          </div>
        `;
        
        console.log("Dynamic HTML:", dynamicHTML);
      });
      
      // AJAX example with special characters
      async function fetchData() {
        try {
          const response = await fetch('/api/data', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer token_with_special_chars_&<>"\'',
            },
            body: JSON.stringify({
              query: "SELECT * FROM users WHERE name LIKE '%test & sample%'",
              filters: {
                "status": "active & verified",
                "category": "premium & enterprise"
              }
            })
          });
          
          if (response.ok) {
            const data = await response.json();
            console.log("Data received:", data);
          }
        } catch (error) {
          console.error("Error occurred:", error.message);
        }
      }
      
      // Regular expressions with special chars
      const patterns = {
        email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
        specialChars: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/,
        htmlTags: /<[^>]*>/g,
        quotes: /["'`]/g
      };
      
      // Test different quote styles
      const singleQuoted = 'This is a single quoted string with "double quotes" inside';
      const doubleQuoted = "This is a double quoted string with 'single quotes' inside";
      const templateLiteral = `This is a template literal with ${singleQuoted} and ${doubleQuoted}`;
      
      console.log("Quote tests passed:", singleQuoted, doubleQuoted, templateLiteral);
    
    // Footer with complex nested structure
    footer.site-footer.bg-dark.text-light.py-5[role="contentinfo"]
      div.container
        div.row.g-4
          div.col-lg-3.col-md-6
            h5.footer-title: üè¢ Company & Info
            ul.footer-links.list-unstyled
              li
                a[href="/about" title="About Us"]: About Us & Our Mission
              li
                a[href="/team" title="Our Team"]: Team & Leadership
              li
                a[href="/careers" title="Careers"]: Careers & Opportunities
              li
                a[href="/press" title="Press"]: Press & Media Kit
          
          div.col-lg-3.col-md-6
            h5.footer-title: üìû Contact & Support
            address.footer-address
              | 123 Main Street, Suite #456
              br
              | City, State 12345-6789
              br
              | Phone: +1 (555) 123-4567
              br
              | Email: 
              a[href="mailto:info@example.com" title="Send us an email"]: info@example.com
          
          div.col-lg-3.col-md-6
            h5.footer-title: üîó Quick Links
            ul.footer-links.list-unstyled
              li
                a[href="/privacy" title="Privacy Policy"]: Privacy Policy & GDPR
              li
                a[href="/terms" title="Terms of Service"]: Terms & Conditions
              li
                a[href="/cookies" title="Cookie Policy"]: Cookie Policy
              li
                a[href="/accessibility" title="Accessibility"]: Accessibility Statement
          
          div.col-lg-3.col-md-6
            h5.footer-title: üì± Follow Us
            div.social-links
              a.social-link[href="https://facebook.com" title="Facebook" aria-label="Follow us on Facebook"]: üìò Facebook
              a.social-link[href="https://twitter.com" title="Twitter" aria-label="Follow us on Twitter"]: üê¶ Twitter
              a.social-link[href="https://instagram.com" title="Instagram" aria-label="Follow us on Instagram"]: üì∑ Instagram
              a.social-link[href="https://linkedin.com" title="LinkedIn" aria-label="Follow us on LinkedIn"]: üíº LinkedIn
        
        hr.footer-divider.my-4
        
        div.row.align-items-center
          div.col-md-6
            p.footer-copyright.mb-0: |
              ¬© 2023-2024 Company Name‚Ñ¢. All rights reserved.
              Patent pending #123,456,789 & trademarks registered.
          
          div.col-md-6.text-md-end
            p.footer-tech.mb-0.text-muted: |
              Powered by TinyHTML Parser v2.0 üöÄ
              Built with ‚ù§Ô∏è & cutting-edge technology
    
    // Additional script for complex interactions
    script[src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-..." crossorigin="anonymous"]
    
    script[type="module"]: |
      // ES6 Module with complex imports and special characters
      import { specialFunction } from './modules/special-chars.js';
      import { unicodeHandler } from './modules/unicode-handler.js';
      
      // Test module functionality
      const testData = {
        'string-with-dashes': 'value with "quotes" & symbols',
        "double-quoted-key": "value with 'single quotes' inside",
        `template-key`: `value with ${Date.now()} timestamp`,
        specialChars: '!@#$%^&*()_+-={}[]|;\':",./<>?',
        unicodeEmoji: 'üéâüöÄüíªüî•‚≠êüåü‚ú®üí´üéØüé™üé®üé≠üé™',
        mathSymbols: '¬±√ó√∑‚àû‚àö‚àë‚àè‚à´‚àÜ‚â§‚â•‚â†‚âà‚àà‚àâ‚äÇ‚äÉ‚à™‚à©',
        currencies: '$‚Ç¨¬£¬•‚Çπ‚ÇΩ‚Çø¬¢‚Ç©‚Ç™‚Ç®‚Ç±‚Ç°‚Çπ'
      };
      
      console.log('Complex test data loaded:', testData);
      
      // Dynamic import with error handling
      try {
        const dynamicModule = await import('./modules/dynamic-content.js');
        dynamicModule.initialize(testData);
      } catch (error) {
        console.warn('Dynamic module failed to load:', error.message);
      }
